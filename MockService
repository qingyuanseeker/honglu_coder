

切换到General -> Editors,增加一个文件类型：
*.usl,同时选择编辑器为Myeclipse JSP Editors为默认,此设置用来打开Myeclipse对usl文件的支持

切换到General -> Content Types,选择JSP Fragment,然后增加*.usl文件类型,
此设置可以打开USL文件的代码自动提示和语法检查

设置"source folder"与"output folder" :
* source folder:存放.java源文件的根目录;
* output folder：.class编译输出的根目录；
* 纯"java project"中,一般把"src"设置为source folder,把bin设置为output folder；
* 在“web project”中,一般把"src"设置为source folder,把WEB-INF/classes设置为output

// PAE接口地址(WSDL)[::后台访问系统参数,静态数据字典,动态数据字典::]
soapPath = SystemParamUtil.getParameterById("301901911");

最后要提到的就是"臭名昭著"的is*Enabled()条件,比如下面的写法:
Java代码,收藏代码 
1. if(log.isDebugEnabled())  
2. log.debug("Place for your commercial");  

log4j可以通过配置来确定某个category的输出级别level, 共有四种, 级别从低到高分别是：
debug -> info -> error -> fatel.日志输出的时候, 只会输出大于等于该级别的日志, 也
就是设置了INFO之后, DEBUG是不会被输出, 只会输出INFO、ERROR和FATAL级别的日志.但即
使日志关闭了, 日志的语句还是会被执行的(只是不输出而已), 因此日志的参数还是会构造, 
例如logger.debug(buildLongString()), 虽然它不会打印语句, 但是buildFullString还是
被执行了, 白费功夫.因此对于性能损耗比较大的日志, 最好先判断日志级别再执行.fatal 
级别的日志是不用判断是否启用的.

这种做法对性能的提高几乎微乎其微(前面在提到SLF4J的时候已经说明),而且是一种过度优化的表现. 
极少情况下需要这样写, 除非构造日志信息非常耗性能. 最后必须记住一点: 程序员应该专注于日志
内容, 而将日志的输出的决定权交给日志框架去非处理. 

1，把该附件的压缩包解压后是com.huawei.codereviewer_1.0.1文件夹
2，将该文件夹放到eclipse目录下的plugins文件夹中
3，重启eclipse
4，在eclipse的菜单中：window->show view->other... 在弹出的窗口中输入code review，eclipse
   中就可以看到code review了

instantclient-basic-win32-10.2.0.5.zip >> oracle 即时客服端文件<配置的方式来生效>
把下载的instantclient-basic-nt-11.2.0.2.0.zip压缩包解压,放到 C:\instantclient_11_2 目录下
在“环境变量”的“系统变量”中增加：
1.ORACLE_HOME = C:\instantclient_11_2
2.TNS_ADMIN = C:\instantclient_11_2
3.NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK
修改Path变量,在后面添加 C:\instantclient_11_2
在C:\instantclient_11_2 新建一个tnsnames.ora文件,增加自己的数据库别名配置
   
How do I create tests for a Web Service when there is no Web Service to write test against
可以为某个接口写对应的 mock service以便模拟web service 为请求提供响应
创建WebService接口模拟服务端 
通过MathUtil.wsdl文件在SoapUI中创建一个SOAP项目
http://localhost:8088/webservice_create/services/MathUtil >>> 
http://www.soapui.org/Getting-Started/web-service-sample-project.html
   
Mockservice 是模拟服务器端的 response,并且这个服务的wsdl 文件已经创建好了
中创建的webservice为例来创建MockService吧,对soapUI基础功能有所了解就能应付
一般的webservice测试需要了: <jetty>
1. 创建project,使用wsdl: http://localhost:7890/axis2/services/HelloWorld?wsdl
2. 创建MockService >> 选择一个soap右键选择Generate MockService      
3. 编写MockService的Response,也就是修改Response,将?改为一个模拟的返回值.
4. 创建一个Request 名称为：MockRequest,并且关闭tomcat,启动MockService后执行MockRequest
